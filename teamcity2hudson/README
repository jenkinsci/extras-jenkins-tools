

                                                README


--------------------------------------------------------------------------------------------------------------
@author Martin Todorov, martin.todorov@fredhopper.com

--------------------------------------------------------------------------------------------------------------

INTRODUCTION
--------------------------------------------------------------------------------------------------------------
This plugin was written with the intention of migrating from TeamCity (TeamCity Enterprise 4.5.4 (build 9071))
to Hudson 1.366. Clearly, there's a much newer TeamCity builds and the converter has not been tested against them.


WHAT TO EXPECT
--------------------------------------------------------------------------------------------------------------
WARNING
-----------------------------------------------------------------------------------
Most-likely it will work out of the box, unless there are new tags in the project-config.xml-s in which case,
in order to get things working, you'll need to add XStream/XPP3 implementations for those tags.
Unfortunately, due to a lack of time, this hasn't been tested against the most recent versions of TeamCity.

This may sound as a lot of work, but it's most-likely only a matter of hours to get things running with a newer
or older TeamCity.

SCM
-----------------------------------------------------------------------------------
Our only need was to support Subversion. With a reasonably minimal effort, you can adjust the Velocity templates
and add support for your version control.

SUPPORTED BUILD TOOLS
-----------------------------------------------------------------------------------
Our needs were to support Ant and Maven.
In addition, JVM options are not handled, although they are supported. Again, with a minimal effort and a slight
adjustment to the Velocity templates, this will be possible, because the parsing of the metadata is already done.

However, MAVEN_OPTS and commandline args are parsed properly.


GETTING THINGS TO WORK
--------------------------------------------------------------------------------------------------------------
You will need a clean copy of the config directory ~/TeamCity-data/config.

TeamCity has the following important directories and files which we care about:
~/TeamCity-data/
  - config/
    - ${module1}/
      - project-config.xml
    - ${module2}/
      - project-config.xml
    - ${module...you get the drift}/
      - project-config.xml
    - vcs-roots.xml

The file vcs-roots.xml contains the id-s of the version controls, their bases, etc.
The project-config.xml, on the other hand, contains the so called 'build types' - modules within a TeamCity
project. One project-config.xml can contain more than one module and each of them has a reference id to a
vcs root defined in vcs-roots.xml file.

The best way to start off is to make a backup of your TeamCity data, tar it and copy the tar to a different
machine to keep things clean. The plugin will not break your current installation of TeamCity, as it doesn't
generate or alter any TeamCity data. But, as this software comes with no guarantees, it's some sane advice to
follow.

Prepare a (preferably) clean installation of Hudson (although, it has been test to work with a pre-populated
Hudson as well).

You will most-likely need to have a look at the Velocity templates first and check if they meet your needs.
You'll probably also have to adjust the publishers and reporters as per your needs.

Once you're done:

mvn clean install -Dmaven.test.skip=true

cd TeamCity-data
    # Remove the trash can and a bunch of other stuff that will usually crash the parser
    rm -rf _*/
    mvn org.buildforce.hudson:tc2hudson:convert \
        -Dhudson.output.directory=hudson/jobs \
        -Dtc2hudson.disable.deploy=true #Preferably, you would like to disable the deployment goal
        -Dtc2hudson.scm.exclusions=tags,branches,foo

    # Make sure Hudson isn't running
    cp -r hudson/jobs ~/.hudson
    # Start Hudson

    # In hudson/ there is also a metabuild.xml generated by the conversion tool which you can later use to
    # reconfigure the modules.

Cross your fingers and hope it works! :)

